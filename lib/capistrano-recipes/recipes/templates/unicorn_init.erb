#!/bin/sh
### BEGIN INIT INFO
# Provides:          unicorn
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Manage unicorn server
# Description:       Start, stop, restart unicorn server for a specific application.
### END INIT INFO
set -e

# Feel free to change any of the following variables for your app:
TIMEOUT=${TIMEOUT-60}
APP_ROOT=<%= current_path %>
PID=<%= unicorn_pid %>
CMD="cd <%= current_path %>; bundle exec unicorn -D -c <%= unicorn_config %> -E <%= rails_env %>"
AS_USER=<%= unicorn_user %>
set -u

OLD_PID="$PID.oldbin"

sig () {
  test -s "$PID" && kill -$1 `cat $PID`
}

oldsig () {
  test -s $OLD_PID && kill -$1 `cat $OLD_PID`
}

run () {
  if [ "$(id -un)" = "$AS_USER" ]; then
    eval $1
  else
    su -c "$1" - $AS_USER
  fi
}

case "$1" in
start)
  sig 0 && echo >&2 "Already running" && exit 0
  run "$CMD"
  ;;
stop)
  sig QUIT && exit 0
  echo >&2 "Not running"
  ;;
force-stop)
  sig TERM && exit 0
  echo >&2 "Not running"
  ;;
restart|reload)
  sig HUP && echo reloaded OK && exit 0
  echo >&2 "Couldn't reload, starting '$CMD' instead"
  run "$CMD"
  ;;
upgrade)
  if test -s $PID; then ORIG_PID=`cat $PID`; else ORIG_PID=0; fi
  if sig USR2
  then
    n=$TIMEOUT

    #wait for .oldpid to be written
    while (!(test -s $OLD_PID) && test $n -ge 0)
    do
      printf '.' && sleep 1 && n=$(( $n - 1 ))
    done

    #when this loop finishes, should have new pid file
    while (!(test -s $PID ) || test -s $OLD_PID) && test $n -ge 0
    do
      printf '.' && sleep 1 && n=$(( $n - 1 ))
    done

    if test -s $PID
    then
      NEW_PID=`cat $PID`
    else
      echo 'New master failed to start; see error log'
      exit 1
    fi

    #timeout has elapsed, verify new pid file exists
    if [ $ORIG_PID -eq $NEW_PID ]
    then
      echo
      echo >&2 'New master failed to start; see error log'
      exit 1
    fi

    #verify old master QUIT
    echo
    if test -s $OLD_PID
    then
      echo >&2 "$OLD_PID still exists after $TIMEOUT seconds"
      exit 1
    fi

    printf 'Unicorn successfully upgraded'
    exit 0
  fi
  echo >&2 "Upgrade failed: executing '$CMD' "
  run "$CMD"
  ;;
reopen-logs)
  sig USR1
  ;;
*)
  echo >&2 "Usage: $0 <start|stop|restart|upgrade|force-stop|reopen-logs>"
  exit 1
  ;;
esac
